project(demo)
cmake_minimum_required(VERSION 2.8.12)
set(demo_VERSION_MAJOR 0)
set(demo_VERSION_MINOR 3)
set(demo_VERSION_PATCH 0)
set(demo_VERSION ${demo_VERSION_MAJOR}.${demo_VERSION_MINOR}.${demo_VERSION_PATCH})

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
		message(FATAL_ERROR "Need at least gcc 4.9 to compile.")
	endif()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthread")
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19)
		message(FATAL_ERROR "Visual Studio 2015 or newer is required.")
	endif()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
	if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 3.6)
		message(FATAL_ERROR "Clang below version 3.6 will most likely not work. Please upgrade your compiler.")
	endif()
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pthreads")
else() 
	message(WARNING "You are using an unsupported compiler. Compilation has only been tested with MSVC, GCC and Clang.")
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag(-std=c++14 HAS_CXX14_FLAG)
	if(HAS_CXX14_FLAG)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
	else()
		message(FATAL_ERROR "Your compiler doesn't support the '-std=c++14' flag.")
	endif()
endif()

include(InstallRequiredSystemLibraries) 
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_PACKAGE_VERSION_MAJOR "${demo_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${demo_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${demo_VERSION_PATCH}")
include(CPack)

find_package(OpenCV 3 REQUIRED core imgcodecs imgproc highgui videoio objdetect)
message(STATUS "OpenCV include dir found at ${OpenCV_INCLUDE_DIRS}")
message(STATUS "OpenCV library dir found at ${OpenCV_LIB_DIR}")
set_target_properties(${OpenCV_LIBS} PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE)

if(NOT OpenCV_haarcascades_DIR)
	# This will fail for system-packaged OpenCV
	list(GET OpenCV_INCLUDE_DIRS 0 OpenCV_first_include_dir)
	set(OpenCV_haarcascades_DIR "${OpenCV_first_include_dir}/../share/OpenCV/haarcascades")
endif()
if(NOT EXISTS "${OpenCV_haarcascades_DIR}/haarcascade_frontalface_alt2.xml")
	message(FATAL_ERROR "Could not find OpenCV's face detector haarcascade_frontalface_alt2.xml in ${OpenCV_haarcascades_DIR}. Please set OpenCV_haarcascades_DIR to the directory with that file.")
endif()

if(MSVC)
	# The standard find_package for boost on Win finds the dynamic libs, so for dynamic linking to boost we need to #define:
	add_definitions(-DBOOST_ALL_NO_LIB) # Don't use the automatic library linking by boost with VS (#pragma ...). Instead, we specify everything here in cmake.
	add_definitions(-DBOOST_ALL_DYN_LINK) # Link against the dynamic boost lib - needs to match with the version that find_package finds.
endif()
find_package(Boost 1.69.0 COMPONENTS system filesystem program_options REQUIRED)
if(Boost_FOUND)
  message(STATUS "Boost found at ${Boost_INCLUDE_DIRS}")
else(Boost_FOUND)
  message(FATAL_ERROR "Boost not found")
endif()

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)
find_package(Eigen3 REQUIRED)
message(STATUS "Eigen3 found: ${EIGEN3_FOUND}")
message(STATUS "Eigen3 include dir found at ${EIGEN3_INCLUDE_DIR}")
message(STATUS "Eigen3 version: ${EIGEN3_VERSION}")


set(eos_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos") 
set(superviseddescent_DIR "${CMAKE_SOURCE_DIR}/3rdparty/superviseddescent")

set(eos_INCLUDE_DIR "${eos_DIR}/include")
set(superviseddescent_INCLUDE_DIR "${superviseddescent_DIR}/include")
set(cereal_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos/3rdparty/cereal/include")
set(glm_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos/3rdparty/glm")
set(nanoflann_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos/3rdparty/nanoflann/include")
set(eigen3_nnls_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos/3rdparty/eigen3-nnls/src")
set(toml11_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/3rdparty/eos/3rdparty/toml11")

include_directories(${Boost_INCLUDE_DIRS})
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${EIGEN3_INCLUDE_DIR})
include_directories(${superviseddescent_INCLUDE_DIR})
include_directories(${eos_INCLUDE_DIR})
include_directories(${cereal_INCLUDE_DIR})
include_directories(${glm_INCLUDE_DIR})
include_directories(${nanoflann_INCLUDE_DIR})
include_directories(${eigen3_nnls_INCLUDE_DIR})
include_directories(${toml11_INCLUDE_DIR})

add_executable(demo demo.cpp helpers.hpp)
target_link_libraries(demo ${OpenCV_LIBS} ${Boost_LIBRARIES})

# install targets:
install(TARGETS demo DESTINATION bin)
install(FILES ${eos_DIR}/share/sfm_shape_3448.bin DESTINATION share)
install(FILES ${eos_DIR}/share/ibug_to_sfm.txt DESTINATION share)
install(FILES ${eos_DIR}/share/sfm_model_contours.json DESTINATION share)
install(FILES ${eos_DIR}/share/sfm_3448_edge_topology.json DESTINATION share)
install(FILES ${eos_DIR}/share/expression_blendshapes_3448.bin DESTINATION share)
install(FILES ${CMAKE_BINARY_DIR}/face_landmarks_model_rcr_68.bin DESTINATION share)
install(FILES ${OpenCV_haarcascades_DIR}/haarcascade_frontalface_alt2.xml DESTINATION share)
